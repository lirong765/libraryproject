<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--加载数据库db文件-->
    <context:property-placeholder location="classpath:database.properties"></context:property-placeholder>

    <!--开启注解扫描 处理service层和dao层，controller不处理-->
    <context:component-scan base-package="com.rong">
        <!--配置不扫描的 -->
        <!--controller不扫描原因:
            Spring容器和springmvc容器的关系如下图所示：
            Spring和springmvc和作为两个独立的容器，会把扫描到的注解对象分别放到两个不同的容器中，
            Springmvc容器是spring容器的一部分，他们访问对象的范围如下所示：
                ①：springmvc子容器可以访问spring父容器中的对象
                ②：spring父容器不能访问springmvc子容器中的对象

            1.如果全部把注解放到spring.xml中配置：
                当一旦采用这种方式之后，spring会将扫描的对象都会存放到spring的容器，而不会放到springmvc子容器中，当访问项目的时候，springmvc找不到处理器映射器，和其对应的Controller，进而报404错误！

            2.不用spring容器，把注解全部放到springmvc中扫描：
                是可以的，在这个里面可以同时扫描Controller层、service层、dao层的注解，但是，子容器Controller进行扫描装配时装配了@Service注解的实例，而该实例理应由父容器进行初始化以保证事务的增强处理（因为事务管理器是配置在spring容器中的），所以此时得到的将是原样的Service（没有经过事务加强处理，故而没有事务处理能力。同理，springmvc中配置controller后也不能将事务配置在controller层，因为因为事务管理器是配置在spring容器中的，如果将事务配置在Controller层的话，spring容器就访问不了springmvc子容器，进而无法访问到事务对象。进而导致事务失效。
        -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--配置数据源信息-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置mybatis的session工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--绑定Mybatis全局配置文件-->
        <property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
        <property name="mapperLocations" value="classpath:com/rong/dao/*.xml" />
    </bean>

    <!--配置dao接口扫描包，动态实现了Dao接口可以注入到Spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入了sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!--要扫描的dao包-->
        <property name="basePackage" value="com.rong.dao"></property>
    </bean>
</beans>